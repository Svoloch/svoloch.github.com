// Generated by CoffeeScript 1.10.0
(function() {
  var addColor, colorDifference, colorToPalette, countRepits, dataToPalette, getPalete, parseColor, showReport, showResult;

  countRepits = function(arr) {
    var j, len, out, val;
    out = {};
    for (j = 0, len = arr.length; j < len; j++) {
      val = arr[j];
      if (out[val] == null) {
        out[val] = 0;
      }
      out[val]++;
    }
    return out;
  };

  parseColor = function(color) {
    if (typeof color === 'string') {
      return /#(..)(..)(..)/.exec(color).slice(1).map(function(i) {
        return parseInt(i, 16);
      });
    } else {
      return color;
    }
  };

  colorDifference = function(arg, arg1) {
    var b0, b1, db, dg, dr, g0, g1, r0, r1;
    r0 = arg[0], g0 = arg[1], b0 = arg[2];
    r1 = arg1[0], g1 = arg1[1], b1 = arg1[2];
    dr = r1 - r0;
    dg = g1 - g0;
    db = b1 - b0;
    return dr * dr + dg * dg + db * db;
  };

  colorToPalette = function(palette, color) {
    var comparator;
    color = parseColor(color);
    comparator = function(a, b) {
      return colorDifference(color, parseColor(a)) - colorDifference(color, parseColor(b));
    };
    return palette.slice(0).sort(comparator)[0];
  };

  dataToPalette = function(palette, data) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      results.push(colorToPalette(palette, [data[i], data[i + 1], data[i + 2]]));
    }
    return results;
  };

  getPalete = function() {
    var colors;
    colors = [];
    ($('#color_list')).find('input').each(function() {
      return colors.push(($(this)).val());
    });
    return colors;
  };

  addColor = function(value) {
    var color, container, del;
    if (value == null) {
      value = "#000000";
    }
    color = ($("<input/>")).attr({
      type: "color"
    });
    color.val(value);
    container = $('<span/>');
    del = ($('<span/>')).text('X');
    del.click(function() {
      return container.remove();
    });
    container.append(color, del);
    return ($('#color_list')).append(container);
  };

  showResult = function(data, w, h) {
    var canvas, color, ctx, i, imageData, j, len, parsedColor;
    canvas = ($("#result"))[0];
    canvas.width = w;
    canvas.height = h;
    ctx = canvas.getContext("2d");
    imageData = ctx.createImageData(w, h);
    for (i = j = 0, len = data.length; j < len; i = ++j) {
      color = data[i];
      parsedColor = parseColor(color);
      imageData.data[i * 4] = parsedColor[0];
      imageData.data[i * 4 + 1] = parsedColor[1];
      imageData.data[i * 4 + 2] = parsedColor[2];
      imageData.data[i * 4 + 3] = 255;
    }
    return ctx.putImageData(imageData, 0, 0);
  };

  showReport = function(data) {
    var color, count, report, results;
    report = $('#report');
    report.empty();
    results = [];
    for (color in data) {
      count = data[color];
      results.push((function() {
        var color_place, container, count_place, name_place;
        container = $('<tr/>');
        color_place = ($('<td/>')).append(($('<div>')).css({
          width: 30,
          height: 20,
          backgroundColor: color
        }));
        name_place = ($('<td/>')).text(color);
        count_place = ($('<td/>')).text(count);
        return report.append(container.append(color_place, name_place, count_place));
      })());
    }
    return results;
  };

  $(function() {
    var h, ref, w;
    ref = [10, 10], w = ref[0], h = ref[1];
    ($('#files')).change(function() {
      return ($("#preview"))[0].src = window.URL.createObjectURL(($("#files"))[0].files[0]);
    });
    if (($('#files'))[0].value) {
      ($('#files')).change();
    }
    ($('#width')).change(function() {
      w = ($('#x_pos'))[0].max = ($("#preview"))[0].width = parseInt(($("#width")).val());
      if ((parseInt(($('#x_pos')).val())) > w) {
        return ($('#x_pos')).val(w);
      }
    });
    ($('#width')).change();
    ($('#height')).change(function() {
      h = ($('#y_pos'))[0].max = ($("#preview"))[0].height = parseInt(($("#height")).val());
      if ((parseInt(($('#y_pos')).val())) > w) {
        return ($('#y_pos')).val(w);
      }
    });
    ($('#height')).change();
    ($('#test')).click(function() {});
    ($('#save')).click(function() {
      return localStorage.palette = JSON.stringify(getPalete());
    });
    ($('#load')).click(function() {
      var color, j, len, ref1, results;
      ($('#color_list')).empty();
      ref1 = JSON.parse(localStorage.palette);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        color = ref1[j];
        results.push(addColor(color));
      }
      return results;
    });
    try {
      ($('#load')).click();
    } catch (undefined) {}
    ($('#add_color')).click(addColor);
    ($('#run')).click(function() {
      var canvas, colors, ctx, imageContent, resultList;
      colors = getPalete();
      canvas = ($("#proc"))[0];
      canvas.width = w;
      canvas.height = h;
      ctx = canvas.getContext("2d");
      ctx.drawImage(($("#preview"))[0], 0, 0, w, h);
      imageContent = ctx.getImageData(0, 0, w, h);
      resultList = dataToPalette(colors, imageContent.data);
      showResult(resultList, w, h);
      return showReport(countRepits(resultList));
    });
    return ($('#export')).click(function() {
      return location.href = ($("#result"))[0].toDataURL().replace("image/png", "image/octet-stream");
    });
  });

}).call(this);
