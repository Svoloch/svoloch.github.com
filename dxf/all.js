// Generated by CoffeeScript 1.10.0
(function() {
  var NccArc, NccLine, NccPath, bound, editMode, ncData, ncResult, parsedDxf, refreshView, scale, selection, shift, showLayer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  NccPath = (function() {
    function NccPath() {}

    NccPath.items = [];

    NccPath.clicker = function(self) {
      return function() {
        switch (editMode) {
          case "dir":
            return self.invert();
          case "sel":
            if (!self.selected) {
              return self.select();
            } else {
              return self.deselect();
            }
            break;
          case "del":
            return self.remove();
        }
      };
    };

    NccPath.fromData = function(data) {
      switch (data.type) {
        case "LINE":
          return NccLine.fromData(data);
        case "ARC":
          return NccArc.fromData(data);
        default:
          throw new TypeError("Unknow type " + data.type);
      }
    };

    NccPath.fromDXF = function(data) {
      switch (data.type) {
        case "LINE":
          return NccLine.fromDXF(data);
        case "ARC":
          return NccArc.fromDXF(data);
        default:
          throw new TypeError("Unknow type " + data.type);
      }
    };

    return NccPath;

  })();

  NccLine = (function(superClass) {
    extend(NccLine, superClass);

    NccLine.fromData = function(data) {
      var self;
      self = new this;
      self.x1 = data.x1;
      self.x2 = data.x2;
      self.y1 = data.y1;
      self.y2 = data.y2;
      return self;
    };

    NccLine.fromDXF = function(data) {
      var self;
      self = new this;
      self.x1 = data.vertices[0].x;
      self.x2 = data.vertices[1].x;
      self.y1 = data.vertices[0].y;
      self.y2 = data.vertices[1].y;
      return self;
    };

    NccLine.prototype.type = "LINE";

    function NccLine() {
      this.line = $svg('line');
      this.line.addClass('ncPath');
      this.line.click(NccPath.clicker(this));
      this.startMark = $svg('circle');
      this.startMark.addClass('ncStart');
      this.startMark.click(NccPath.clicker(this));
      NccPath.items.push(this);
    }

    NccLine.prototype.getX1 = function() {
      return this.x1;
    };

    NccLine.prototype.getX2 = function() {
      return this.x2;
    };

    NccLine.prototype.getY1 = function() {
      return this.y1;
    };

    NccLine.prototype.getY2 = function() {
      return this.y2;
    };

    NccLine.prototype.getData = function() {
      return {
        x1: this.x1,
        x2: this.x2,
        y1: this.y1,
        y2: this.y2
      };
    };

    NccLine.prototype.invert = function() {
      var ref;
      ref = [this.x2, this.y2, this.x1, this.y1], this.x1 = ref[0], this.y1 = ref[1], this.x2 = ref[2], this.y2 = ref[3];
      this.startMark.attr({
        cx: this.x1 * scale + shift.X,
        cy: this.y1 * scale + shift.Y
      });
      return this;
    };

    NccLine.prototype.select = function() {
      selection.push(this);
      this.selected = true;
      this.line.addClass("ncSelect");
      return this;
    };

    NccLine.prototype.deselect = function() {
      var selection;
      selection = selection.filter((function(_this) {
        return function(a) {
          return a !== _this;
        };
      })(this));
      this.selected = false;
      this.line.removeClass("ncSelect");
      return this;
    };

    NccLine.prototype.remove = function() {
      this.deselect();
      this.line.remove();
      this.startMark.remove();
      return this.removed = true;
    };

    NccLine.prototype.refresh = function() {
      this.line.attr({
        x1: this.x1 * scale + shift.X,
        x2: this.x2 * scale + shift.X,
        y1: this.y1 * scale + shift.Y,
        y2: this.y2 * scale + shift.Y
      });
      return this.startMark.attr({
        cx: this.x1 * scale + shift.X,
        cy: this.y1 * scale + shift.Y,
        r: 5
      });
    };

    NccLine.prototype.showIn = function(place) {
      this.refresh();
      return place.append(this.line, this.startMark);
    };

    return NccLine;

  })(NccPath);

  NccArc = (function(superClass) {
    extend(NccArc, superClass);

    NccArc.fromData = function(data) {
      var self;
      self = new this;
      self.start = data.start;
      self.end = data.endAngle;
      self.angle = data.angle;
      self.x = data.x;
      self.y = data.y;
      self.r = data.r;
      return self;
    };

    NccArc.fromDXF = function(data) {
      var self;
      self = new this;
      self.start = data.startAngle;
      self.end = data.endAngle;
      self.angle = data.angleLength;
      self.x = data.center.x;
      self.y = data.center.y;
      self.r = data.radius;
      return self;
    };

    NccArc.prototype.type = "ARC";

    function NccArc(data) {
      this.line = $svg('path');
      this.line.addClass('ncPath');
      this.line.click(NccPath.clicker(this));
      this.startMark = $svg('circle');
      this.startMark.addClass('ncStart');
      this.startMark.click(NccPath.clicker(this));
      NccPath.items.push(this);
    }

    NccArc.prototype.getX1 = function() {
      return this.x + this.r * (Math.cos(this.start));
    };

    NccArc.prototype.getX2 = function() {
      return this.x + this.r * (Math.cos(this.end));
    };

    NccArc.prototype.getY1 = function() {
      return this.y + this.r * (Math.sin(this.start));
    };

    NccArc.prototype.getY2 = function() {
      return this.y + this.r * (Math.sin(this.end));
    };

    NccArc.prototype.getData = function() {
      return {
        x: this.x,
        y: this.y,
        r: this.r,
        start: this.start,
        end: this.end,
        angle: this.angle
      };
    };

    NccArc.prototype.invert = function() {
      var ref;
      this.angle *= -1;
      ref = [this.end, this.start], this.start = ref[0], this.end = ref[1];
      return this.refresh();
    };

    NccArc.prototype.select = function() {
      selection.push(this);
      this.selected = true;
      this.line.addClass("ncSelect");
      return this;
    };

    NccArc.prototype.deselect = function() {
      var selection;
      selection = selection.filter((function(_this) {
        return function(a) {
          return a !== _this;
        };
      })(this));
      this.selected = false;
      this.line.removeClass("ncSelect");
      return this;
    };

    NccArc.prototype.remove = function() {
      this.deselect();
      this.line.remove();
      this.startMark.remove();
      return this.removed = true;
    };

    NccArc.prototype.refresh = function() {
      this.line.attr({
        d: "M " + (this.getX1() * scale + shift.X) + " " + (this.getY1() * scale + shift.Y) + "\nA \n	" + (this.r * scale) + "\n	" + (this.r * scale) + "\n	" + 0. + "\n	" + (Math.abs(this.angle) > Math.PI ? 1 : 0) + "\n	" + (this.angle > 0 ? 1 : 0) + "\n	" + (this.getX2() * scale + shift.X) + "\n	" + (this.getY2() * scale + shift.Y)
      });
      return this.startMark.attr({
        cx: this.getX1() * scale + shift.X,
        cy: this.getY1() * scale + shift.Y,
        r: 5
      });
    };

    NccArc.prototype.showIn = function(place) {
      this.refresh();
      return place.append(this.line, this.startMark);
    };

    return NccArc;

  })(NccPath);

  $R(function() {
    ($ID('topMenu')).mouseover(function() {
      return ($ID('topMenuContent')).css({
        display: 'block'
      });
    });
    ($ID('topMenu')).mouseout(function() {
      if (!($ID('topMenuFix'))[0].checked) {
        return ($ID('topMenuContent')).css({
          display: 'none'
        });
      }
    });
    ($ID('operationList')).mouseover(function() {
      return ($ID('operationListContent')).css({
        display: 'block'
      });
    });
    return ($ID('operationList')).mouseout(function() {
      if (!($ID('operationListFix'))[0].checked) {
        return ($ID('operationListContent')).css({
          display: 'none'
        });
      }
    });
  });

  editMode = "dir";

  selection = [];

  scale = 2;

  shift = {
    X: 600,
    Y: 400
  };

  bound = {
    W: 1200,
    H: 800
  };

  refreshView = function() {
    return NccPath.items.forEach(function(item) {
      return item.refresh();
    });
  };

  showLayer = function(layer) {
    var ncData;
    ncData = parsedDxf.entities.filter(function(a) {
      return a.layer === layer && (a.type === "LINE" || a.type === "ARC");
    });
    ($ID('svg')).empty();
    selection = [];
    return ncData.forEach(function(data) {
      var nccPath;
      nccPath = NccPath.fromDXF(data);
      return nccPath.showIn($ID('svg'));
    });
  };

  ncData = [];

  ncResult = [];

  parsedDxf = null;

  $R(function() {
    var changeCorrectionFlag;
    ($ID('file')).change(function() {
      var fileName, reader;
      fileName = ($ID('file'))[0].files[0];
      reader = new FileReader;
      reader.onload = function() {
        var dxfData, dxfParser, i, layer, layerOption, len, ref;
        dxfData = reader.result;
        ($ID('src')).val(dxfData);
        dxfParser = new DxfParser;
        parsedDxf = dxfParser.parseSync(dxfData);
        ($ID('json')).val(JSON.stringify(parsedDxf));
        ($ID('layer')).empty();
        ref = Object.keys(parsedDxf.tables.layer.layers);
        for (i = 0, len = ref.length; i < len; i++) {
          layer = ref[i];
          layerOption = $html('option');
          layerOption.append(layer);
          layerOption.attr({
            value: layer
          });
          ($ID('layer')).append(layerOption);
        }
        return showLayer((Object.keys(parsedDxf.tables.layer.layers))[0]);
      };
      return reader.readAsText(fileName);
    });
    ($ID('direction')).click(function() {
      return editMode = "dir";
    });
    ($ID('sorting')).click(function() {
      return editMode = "sel";
    });
    ($ID('reset')).click(function() {
      return selection.forEach(function(a) {
        return a.deselect;
      });
    });
    ($ID('remove')).click(function() {
      return editMode = "del";
    });
    ($ID('generate')).click(function() {
      var i, item, len, position, rapid;
      ncResult = ["T1", "F100 S500"];
      for (position = i = 0, len = selection.length; i < len; position = ++i) {
        item = selection[position];
        if (position) {
          $L(selection[position - 1].getX2(), item.getX1(), selection[position - 1].getY2(), item.getY1());
          rapid = !(selection[position - 1].getX2().toFixed(3) === item.getX1().toFixed(3) && selection[position - 1].getY2().toFixed(3) === item.getY1().toFixed(3));
        } else {
          $L("start");
          rapid = true;
        }
        if (rapid) {
          if (($ID('backwordDirection')).val() === "Z") {
            ncResult.push("G0 Z" + ((parseFloat(($ID('backwordValue')).val())).toFixed(3)));
            ncResult.push("G0 X" + ((item.getY1() * 2).toFixed(3)));
            ncResult.push("G0 Z" + (item.getX1().toFixed(3)));
          } else {
            ncResult.push("G0 X" + ((parseFloat(($ID('backwordValue')).val())).toFixed(3)));
            ncResult.push("G0 Z" + (item.getX1().toFixed(3)));
            ncResult.push("G0 X" + ((item.getY1() * 2).toFixed(3)));
          }
        }
        switch (item.type) {
          case "LINE":
            ncResult.push("G1 X" + ((item.getY2() * 2).toFixed(3)) + " Z" + (item.getX2().toFixed(3)));
            break;
          case "ARC":
            ncResult.push("G" + (item.angle < 0 ? 2 : 3) + " X" + ((item.getY2() * 2).toFixed(3)) + " Z" + (item.getX2().toFixed(3)) + " I" + ((item.y * 2).toFixed(3)) + " K" + (item.x.toFixed(3)));
        }
      }
      if (($ID('backwordDirection'))[0].value === "Z") {
        ncResult.push("G0 Z" + ((parseFloat(($ID('backwordValue')).val())).toFixed(3)));
      } else {
        ncResult.push("G0 X" + ((parseFloat(($ID('backwordValue')).val())).toFixed(3)));
      }
      ncResult.push("M2");
      return alert(ncResult.join("\n"));
    });
    ($ID('layer')).change(function() {
      var currentLayer;
      currentLayer = ($ID('layer')).val();
      return showLayer(currentLayer);
    });
    ($ID('incScale')).click(function() {
      scale *= 2;
      shift.X *= 2;
      shift.Y *= 2;
      shift.X -= bound.W / 2;
      shift.Y -= bound.H / 2;
      return refreshView();
    });
    ($ID('decScale')).click(function() {
      scale /= 2;
      shift.X /= 2;
      shift.Y /= 2;
      shift.X += bound.W / 4;
      shift.Y += bound.H / 4;
      return refreshView();
    });
    ($ID('background')).mousedown(function(e) {
      var moveFn, startX, startY, upFn;
      startX = e.clientX;
      startY = e.clientY;
      moveFn = function(e) {
        shift.X += e.clientX - startX;
        shift.Y += e.clientY - startY;
        startX = e.clientX;
        startY = e.clientY;
        return refreshView();
      };
      ($ID('background')).mousemove(moveFn);
      return ($ID('background')).mouseup(upFn = function() {
        ($ID('background')).off('mousemove', moveFn);
        return ($ID('background')).off('mouseup', upFn);
      });
    });
    ($ID('correctionFlag')).change(changeCorrectionFlag = function() {
      return ($ID('correctionValue')).attr({
        disabled: ($ID('correctionFlag')).val() && null
      });
    });
    return changeCorrectionFlag();
  });

}).call(this);
