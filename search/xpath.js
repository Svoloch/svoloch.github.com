// Generated by CoffeeScript 2.3.1
var $A, $C, $ID, $L, $N, $R, $X, $html, $svg,
  indexOf = [].indexOf;

$X = (function() {
  var Class, XPath, defaults;
  defaults = {
    ns: {
      svg: "http://www.w3.org/2000/svg",
      html: "http://www.w3.org/1999/xhtml",
      xul: "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
      xslt: "http://www.w3.org/1999/XSL/Transform",
      fo: "http://www.w3.org/1999/XSL/Format",
      xlink: "http://www.w3.org/1999/xlink"
    },
    resolver: function(ns) {
      return function(prefix) {
        return ns[prefix] || null;
      };
    },
    type: 0
  };
  Class = (function() {
    class Class extends [].constructor {
      constructor(...args) {
        super(...args);
      }

      clone() {
        var result;
        result = new this.constructor;
        result.push.apply(result, this);
        return result;
      }

      xpath(xp, config) {
        var element, i, len, ref, result;
        result = new this.constructor;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          result.push.apply(result, this.constructor.XPath(xp, element, config));
        }
        return result;
      }

      xpathFilter(xp) {
        var result;
        result = new this.constructor;
        result.push.apply(result, this.filter((item) => {
          return (this.constructor.XPath(xp, item, {
            type: 3
          }))[0];
        }));
        return result;
      }

      addListener(event, callback) {
        var i, item, len, ref;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          try {
            item.addEventListener(event, callback, false);
          } catch (error) {}
        }
        return this;
      }

      removeListener(event, callback) {
        var i, item, len, ref;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          try {
            item.removeEventListener(event, callback, false);
          } catch (error) {}
        }
        return this;
      }

      on() {
        return this.addListener.apply(this, arguments);
      }

      off() {
        return this.removeListener.apply(this, arguments);
      }

      one(event, callback) {
        var i, item, len, oneCallback, ref;
        oneCallback = function() {
          try {
            this.removeEventListener(event, oneCallback, false);
          } catch (error) {}
          return callback.apply(this, arguments);
        };
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          try {
            item.addEventListener(event, oneCallback, false);
          } catch (error) {}
        }
        return this;
      }

      once(event, callback) {
        var copy, i, item, len, onceCallback, ref;
        copy = this.clone();
        onceCallback = function() {
          var i, item, len;
          try {
            for (i = 0, len = copy.length; i < len; i++) {
              item = copy[i];
              item.removeEventListener(event, onceCallback, false);
            }
          } catch (error) {}
          return callback.apply(this, arguments);
        };
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          try {
            item.addEventListener(event, onceCallback, false);
          } catch (error) {}
        }
        return this;
      }

      dispatch(name, params = {}) {
        var element, event, i, len, ref, results;
        ref = this;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          if (!(typeof element.dispatchEvent === 'function')) {
            continue;
          }
          event = new Event(name, params);
          results.push(element.dispatchEvent(event));
        }
        return results;
      }

      fire() {
        return this.dispatch.apply(this, arguments);
      }

      addClass(cls) {
        var classValue, i, item, len, ref;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            item.setAttribute('class', item.hasAttribute('class') ? (classValue = item.getAttribute('class'), indexOf.call(classValue.split(/\s+/), cls) >= 0 ? classValue : `${classValue} ${cls}`) : cls);
          }
        }
        return this;
      }

      removeClass(cls) {
        var i, item, len, newClass, ref, test;
        test = function(className) {
          return className !== cls;
        };
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            if (newClass = (item.getAttribute('class') || "").split(/\s+/).filter(test).join(' ')) {
              item.setAttribute('class', newClass);
            } else {
              item.removeAttribute('class');
            }
          }
        }
        return this;
      }

      hasClass(cls) {
        var i, item, len, ref;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            if (~(item.getAttribute('class') || "").indexOf(cls)) {
              return true;
            }
          }
        }
        return false;
      }

      attr(attrs) {
        var i, item, len, name, ns, ref, splited, value;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            for (name in attrs) {
              value = attrs[name];
              splited = name.split(':');
              if (splited.length === 2) {
                [ns, name] = splited;
                ns = this.constructor.XPath.defaults.ns[ns];
                try {
                  if (value != null) {
                    item.setAttributeNS(ns, name, value);
                  } else {
                    item.removeAttributeNS(ns, name);
                  }
                } catch (error) {}
              } else {
                try {
                  if (value != null) {
                    item.setAttribute(name, value);
                  } else {
                    item.removeAttribute(name);
                  }
                } catch (error) {}
              }
            }
          }
        }
        return this;
      }

      getAttr(attr) {
        return (this.constructor.XPath(`@${attr}`, this[0], {
          type: 2
        }))[0];
      }

      css(attrs) {
        var i, item, len, name, ref, value;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            for (name in attrs) {
              value = attrs[name];
              item.style[name] = value;
            }
          }
        }
        return this;
      }

      empty() {
        var i, item, len, ref;
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Element) {
            while (item.hasChildNodes()) {
              item.removeChild(item.firstChild);
            }
          }
        }
        return this;
      }

      remove() {
        var i, item, len, ref, results;
        ref = this;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Node) {
            if (item.parentNode instanceof Node) {
              results.push(item.parentNode.removeChild(item));
            } else {
              results.push(void 0);
            }
          }
        }
        return results;
      }

      prepend(...args) {
        var element, i, item, len, prependArray, prependArrayMain, ref;
        if (!args.length) {
          return this;
        }
        prependArrayMain = function(arr) {
          var i, index, results, value;
          results = [];
          for (index = i = arr.length - 1; i >= 0; index = i += -1) {
            value = arr[index];
            if (value instanceof Node) {
              results.push(element.insertBefore(value, element.firstChild));
            } else if (value instanceof [].constructor) {
              results.push(prependArray(value));
            } else {
              if (value != null) {
                results.push(element.insertBefore(document.createTextNode(`${value}`), element.firstChild));
              } else {
                results.push(void 0);
              }
            }
          }
          return results;
        };
        prependArray = function(arr) {
          if (element.firstChild) {
            prependArray = prependArrayMain;
            return prependArrayMain(arr);
          } else if (arr[arr.length - 1] instanceof [].constructor) {
            prependArray(arr[arr.length - 1]);
            return prependArray(arr.slice(0, -1));
          } else {
            if (arr[arr.length - 1] instanceof Node) {
              element.appendChild(arr[arr.length - 1]);
            } else {
              if (typeof value !== "undefined" && value !== null) {
                element.appendChild(document.createTextNode(`${value}`));
              }
            }
            prependArray = prependArrayMain;
            return prependArray(arr.slice(0, -1));
          }
        };
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Node) {
            element = item;
            break;
          }
        }
        if (element) {
          prependArray(args);
        }
        return this;
      }

      append(...args) {
        var appendArray, element, i, item, len, ref;
        if (!args.length) {
          return this;
        }
        appendArray = function(arr) {
          var i, len, results, value;
          results = [];
          for (i = 0, len = arr.length; i < len; i++) {
            value = arr[i];
            if (value instanceof Node) {
              results.push(element.appendChild(value));
            } else if (value instanceof [].constructor) {
              results.push(appendArray(value));
            } else {
              if (value != null) {
                results.push(element.appendChild(document.createTextNode(`${value}`)));
              } else {
                results.push(void 0);
              }
            }
          }
          return results;
        };
        ref = this;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Node) {
            element = item;
            break;
          }
        }
        if (element) {
          appendArray(args);
        }
        return this;
      }

      insertBefore(place) {
        var i, len, node, ref;
        if (place instanceof Node && place.parentNode) {
          ref = this;
          for (i = 0, len = ref.length; i < len; i++) {
            node = ref[i];
            if (node instanceof Node) {
              place.parentNode.insertBefore(node, place);
            } else {
              if (node != null) {
                place.parentNode.insertBefore(document.createTextNode(`${node}`), place);
              }
            }
          }
        } else if (place instanceof [].constructor) {
          place.some((item) => {
            if (!(item instanceof Element)) {
              return false;
            }
            this.insertBefore(item);
            return true;
          });
        }
        return this;
      }

      insertAfter(place) {
        var i, j, len, len1, next, node, ref, ref1;
        if (place instanceof Node) {
          next = place.nextElementSibling;
          if (next instanceof Node) {
            ref = this;
            for (i = 0, len = ref.length; i < len; i++) {
              node = ref[i];
              if (node instanceof Node) {
                next.parentNode.insertBefore(node, next);
              } else {
                if (node != null) {
                  next.parentNode.insertBefore(document.createTextNode(`${node}`), next);
                }
              }
            }
          } else {
            ref1 = this;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              node = ref1[j];
              if (node instanceof Node) {
                place.parentNode.appendChild(node);
              } else {
                if (node != null) {
                  place.parentNode.appendChild(document.createTextNode(`${node}`));
                }
              }
            }
          }
        } else if (place instanceof [].constructor) {
          place.some((item) => {
            if (!(item instanceof Element)) {
              return false;
            }
            this.insertAfter(item);
            return true;
          });
        }
        return this;
      }

      getFirstNode() {
        return this.some(function(item) {
          if (item instanceof Node) {
            return item;
          }
          if (item instanceof [].constructor) {
            (new this.constructor(...item)).firstNode();
          }
        });
      }

      replace(...arr) {
        (new this.constructor(...arr)).insertBefore(this.getFirstNode());
        return this.remove();
      }

      replaceContent(...arr) {
        return this.empty().append(...arr);
      }

      val(value) {
        var i, item, j, len, len1, ref, ref1;
        if (arguments.length) {
          ref = this;
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            if (!(item instanceof Element)) {
              continue;
            }
            item.value = value;
            switch (false) {
              case !(item instanceof HTMLTextAreaElement):
                item.value = value;
                break;
              case !(item instanceof HTMLSelectElement):
                item.value = value;
                break;
              case !(item instanceof HTMLInputElement):
                switch (item.getAttribute) {
                  case 'file':
                    continue;
                  case 'checkbox':
                  case 'radio':
                    item.checked = !!value;
                    break;
                  default:
                    item.value = value;
                }
            }
          }
          return this;
        } else {
          ref1 = this;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            if (item instanceof Element) {
              switch (false) {
                case !(item instanceof HTMLTextAreaElement):
                  return item.value;
                case !(item instanceof HTMLSelectElement):
                  return item.value;
                case !(item instanceof HTMLInputElement):
                  switch (item.getAttribute) {
                    case 'file':
                      return item.files;
                    case 'checkbox':
                    case 'radio':
                      return item.checked;
                    default:
                      return item.value;
                  }
              }
            }
          }
        }
      }

    };

    Class.prototype.unique = typeof Set === 'function' ? function() {
      var result, set;
      result = new this.constructor;
      set = new Set;
      this.forEach(function(item) {
        if (!set.has(item)) {
          set.add(item);
          return result.push(item);
        }
      });
      return result;
    } : function() {
      var result;
      result = new this.constructor;
      this.forEach(function(item) {
        if (indexOf.call(result, item) < 0) {
          return result.push(item);
        }
      });
      return result;
    };

    return Class;

  }).call(this);
  XPath = function(xpath, root = document, config) {
    var i, index, item, iterator, ref, resolver, result, type;
    resolver = (((config != null ? config.resolver : void 0) != null) || defaults.resolver)(((config != null ? config.ns : void 0) != null) || defaults.ns);
    type = (config != null ? config.type : void 0) != null ? config.type : defaults.type;
    iterator = (function() {
      try {
        return document.evaluate(xpath, root, resolver, type, null);
      } catch (error) {}
    })();
    result = new Class;
    if (iterator) {
      switch (iterator.resultType) {
        case 1:
          result.push(iterator.numberValue);
          break;
        case 2:
          result.push(iterator.stringValue);
          break;
        case 3:
          result.push(iterator.booleanValue);
          break;
        case 4:
        case 5:
          while ((item = iterator.iterateNext()) != null) {
            result.push(item);
          }
          break;
        case 6:
        case 7:
          for (index = i = 0, ref = iterator.snapshotLength; (0 <= ref ? i < ref : i > ref); index = 0 <= ref ? ++i : --i) {
            result.push(iterator.snapshotItem(index));
          }
          break;
        case 8:
        case 9:
          result.push(iterator.singleNodeValue);
      }
    }
    return result;
  };
  XPath.Class = Class;
  Class.XPath = XPath;
  XPath.defaults = defaults;
  XPath.clone = function() {
    var field, i, len, newClass, newXPath, ref;
    newXPath = (function(originalXPath) {
      return function() {
        return originalXPath.apply(this, arguments);
      };
    })(this);
    ref = Object.keys(this);
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      newXPath[field] = this[field];
    }
    newClass = class extends this.Class {
      constructor(...args) {
        super(...args);
      }

    };
    newClass.XPath = newXPath;
    newXPath.Class = newClass;
    return newXPath;
  };
  return XPath;
})();

$A = (function() {
  var isArray;
  isArray = function(a) {
    return (a instanceof [].constructor) || ((typeof a !== 'string') && !(a instanceof ''.constructor) && !(a instanceof Node) && ((function() {
      try {
        return [].slice.call(a, 0).length === a.length;
      } catch (error) {
        return false;
      }
    })()));
  };
  return function(...arr) {
    var i, j, len, len1, result, subval, val;
    result = new $X.Class;
    for (i = 0, len = arr.length; i < len; i++) {
      val = arr[i];
      if (val == null) {
        continue;
      }
      if (isArray(val)) {
        for (j = 0, len1 = val.length; j < len1; j++) {
          subval = val[j];
          result.push(...($A(subval)));
        }
      } else {
        result.push(val);
      }
    }
    return result;
  };
})();

$svg = function(tag) {
  return $A(document.createElementNS("http://www.w3.org/2000/svg", tag));
};

$html = function(tag) {
  return $A(document.createElementNS("http://www.w3.org/1999/xhtml", tag));
};

$ID = function(id, root = document) {
  var e, element, result;
  element = (function() {
    try {
      return root.getElementById(id);
    } catch (error) {
      e = error;
      return null;
    }
  })();
  result = new $X.Class;
  if (element != null) {
    result.push(element);
  }
  return result;
};

$C = function(cls, root = document) {
  return $A(...(root.getElementsByClassName(cls)));
};

$N = function(name, root) {
  return $X(`//*[@name=${JSON.stringify(name)}]`, root);
};

$L = console.log.bind(console);

$R = (function() {
  var list;
  list = [];
  return function(callback) {
    var e, results;
    if (document.readyState !== "complete") {
      return $A(document).on('DOMContentLoaded', function() {
        return callback();
      });
    } else {
      if (list.length) {
        return list.push(callback);
      } else {
        list.push(callback);
        results = [];
        while (list.length) {
          try {
            results.push(list[0]());
          } catch (error) {
            e = error;
            results.push(setTimeout((function() {
              throw e;
            }), 0));
          } finally {
            list.shift();
          }
        }
        return results;
      }
    }
  };
})();

"concat slice splice map filter".split(" ").forEach(function(name) {
  return $X.Class.prototype[name] = (function(method) {
    return function() {
      var result;
      result = new this.constructor;
      result.push.apply(result, method.apply(this, arguments));
      return result;
    };
  })($X.Class.prototype[name]);
});

"a abbr acronym address applet area article aside audio\nb base basefont bdi bdo bgsound big blink blockquote body br button\ncanvas caption center cite code col colgroup command comment\ndatalist dd del details dfn dir div dl dt em embed\nfieldset figcaption figure font footer form frame frameset\nh1 h2 h3 h4 h5 h6 head header hgroup hr html\ni iframe img input ins isindex kbd keygen label legend li link listing\nmain map mark marquee menu meta meter multicol\nnav nobr noembed noframes noscript object ol optgroup option output\np param plaintext pre progress q rp rt ruby\ns samp script section select small source spacer span strike strong style sub summary sup\ntable tbody td textarea tfoot th thead time title tr track tt u ul var video wbr xmp".split(/\s+/).forEach(function(name) {
  return $html[name] = function(...args) {
    var arg, i, len, tag;
    tag = $html(name);
    for (i = 0, len = args.length; i < len; i++) {
      arg = args[i];
      if (typeof arg === 'string') {
        tag.addClass(arg);
      } else if (typeof arg === 'object') {
        tag.attr(arg);
      } else if (tag.constructor.XPath.defaults.strict) {
        throw new TypeError("Wrong type of parameter");
      }
    }
    return tag;
  };
});

"a altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform\ncircle clipPath color-profile cursor defs desc ellipse\nfeBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix\nfeDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR\nfeGaussianBlur feImage feMerge feMergeNode feMorphology feOffset\nfePointLight feSpecularLighting feSpotLight feTile feTurbulence\nfilter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject\ng glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath\npath pattern polygon polyline radialGradient rect script set stop style svg switch symbol\ntext textPath title tref tspan use view vkern".split(/\s+/).forEach(function(name) {
  return $svg[name] = function(...args) {
    var arg, i, len, tag;
    tag = $svg(name);
    for (i = 0, len = args.length; i < len; i++) {
      arg = args[i];
      if (typeof arg === 'string') {
        tag.addClass(arg);
      } else if (typeof arg === 'object') {
        tag.attr(arg);
      } else if (tag.constructor.XPath.defaults.strict) {
        throw new TypeError("Wrong type of parameter");
      }
    }
    return tag;
  };
});

"click dblclick mousedown mouseup mouseover mousemove mouseout dragstart drag dragenter\ndragleave dragover drop dragend keydown keypress keyup load unload abort\nerror resize scroll select change submit reset focus blur focusin\nfocusout DOMActivate DOMSubtreeModified DOMNodeInserted DOMNodeRemoved\nDOMNodeRemovedFromDocument DOMNodeInsertedIntoDocument DOMAttrModified DOMCharacterDataModified\ntouchstart touchend touchmove touchenter touchleave\ntouchcancel pointerdown pointerup pointercancel pointermove\npointerover pointerout pointerenter pointerleave gotpointercapture\nlostpointercapture cut copy paste beforecut\nbeforecopy beforepaste afterupdate beforeupdate cellchange\ndataavailable datasetchanged datasetcomplete errorupdate rowenter\nrowexit rowsdelete rowinserted contextmenu\nselectstart help beforeunload stop beforeeditfocus\nstart finish bounce beforeprint afterprint\npropertychange filterchange readystatechange losecapture DOMMouseScroll\ndragdrop dragexit draggesture CheckboxStateChange RadioStateChange close command input\nDOMMenuItemActive DOMMenuItemInactive overflow overflowchanged\nunderflow popuphidden popuphiding popupshowing popupshown broadcast commandupdate".split(/\s/).forEach(function(event) {
  return $X.Class.prototype[event] = function(callback) {
    return this.on(event, callback);
  };
});

(function(XPath) {
  var add, lastAdd, lastRemove, remove, removeAllListeners;
  lastAdd = XPath.Class.prototype.addListener;
  lastRemove = XPath.Class.prototype.removeListener;
  add = function(element, event, callback) {
    var base, base1, base2, base3;
    if (element.__xpathinfo__ == null) {
      element.__xpathinfo__ = {};
    }
    if ((base = element.__xpathinfo__).events == null) {
      base.events = {};
    }
    if ((base1 = element.__xpathinfo__).eventsDeleted == null) {
      base1.eventsDeleted = {};
    }
    if ((base2 = element.__xpathinfo__.events)[event] == null) {
      base2[event] = [];
    }
    if ((base3 = element.__xpathinfo__.eventsDeleted)[event] == null) {
      base3[event] = 0;
    }
    return element.__xpathinfo__.events[event].push(callback);
  };
  remove = function(element, event, callback) {
    var callbacks, deletes, ref, ref1;
    if ((element != null ? (ref = element.__xpathinfo__) != null ? (ref1 = ref.events) != null ? ref1[event] : void 0 : void 0 : void 0) != null) {
      callbacks = element.__xpathinfo__.events[event];
      deletes = element.__xpathinfo__.eventsDeleted[event];
      deletes += delete callbacks[callbacks.indexOf(callback)];
      if (deletes > 16 && deletes * 2 > callbacks.length) {
        element.__xpathinfo__.events[event] = callbacks.filter(function(x) {
          return x;
        });
        return element.__xpathinfo__.eventsDeleted[event] = 0;
      }
    }
  };
  removeAllListeners = function(event) {
    return this.forEach(function(element) {
      var ref, ref1;
      try {
        if ((element != null ? (ref = element.__xpathinfo__) != null ? (ref1 = ref.events) != null ? ref1[event] : void 0 : void 0 : void 0) != null) {
          element.__xpathinfo__.events[event].forEach(function(callback) {
            return lastRemove.call([element], event, callback);
          });
          element.__xpathinfo__.events[event] = [];
          return element.__xpathinfo__.eventsDeleted[event] = 0;
        }
      } catch (error) {}
    });
  };
  XPath.Class.prototype.addListener = function(event, callback) {
    var element, i, len, ref;
    ref = this;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      add(element, event, callback);
    }
    return lastAdd.call(this, event, callback);
  };
  return XPath.Class.prototype.removeListener = function(event, callback) {
    var element, i, len, ref;
    if (arguments.length > 1) {
      ref = this;
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        remove(element, event, callback);
      }
      lastRemove.call(this, event, callback);
    } else {
      removeAllListeners.call(this, event);
    }
    return this;
  };
})($X);
