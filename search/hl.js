// Generated by CoffeeScript 2.3.1
$X.Class.prototype.unwrap = function() {
  return this.forEach(function(node) {
    var child, parent;
    if (parent = node.parentNode) {
      while (child = node.firstChild) {
        parent.insertBefore(child, node);
      }
      return parent.removeChild(node);
    }
  });
};

$X.Class.prototype.normalizeText = function() {
  this.forEach(function(item) {
    var i, len, node, ref, texts;
    if (item instanceof Element) {
      texts = [[]];
      ref = item.childNodes;
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        if (node instanceof Text) {
          texts[0].push(node);
        } else {
          if (texts[0].length) {
            texts.unshift([]);
          }
        }
      }
      return texts.reverse().forEach(function(seq) {
        var text;
        if (seq.length > 1) {
          text = seq.map(function(node) {
            return node.nodeValue;
          }).join('');
          $A(text).insertBefore(seq[0]);
          return seq.forEach(function(node) {
            return $A(node).remove();
          });
        }
      });
    }
  });
  return this;
};

$X.Class.prototype.unspan = function(cls) {
  var parents, spans;
  spans = $A(this.map(function(n) {
    return $C(cls, n);
  })).xpathFilter("local-name()='span'");
  parents = spans.xpath("..").unique();
  spans.unwrap();
  parents.normalizeText();
  return this;
};

$X.Class.prototype.highlight = (function() {
  var encode;
  encode = function(text) {
    return text.replace(/[&\<\>\'\"]/, function(char) {
      return `&${char.charCodeAt(0)};`;
    });
  };
  return function(cls, text) {
    var out;
    out = [];
    if (text) {
      this.xpath(".//text()").xpathFilter(`contains(.,'${encode(text)}')`).forEach((textNode) => {
        var nodes, span, splitted;
        splitted = textNode.nodeValue.split(text);
        nodes = $A(splitted.shift());
        while (splitted.length) {
          span = $html.span(cls).append(text)[0];
          nodes.push(span, splitted.shift());
          out.push(span);
        }
        nodes.insertBefore(textNode);
        return $A(textNode).remove();
      });
    }
    return $A(out);
  };
})();
